# expected spread size for different  DP algorithmsfrom dp_models import *# settingsm = 20                       # samples from influence cascadesiter_arc_live = 40           # number of influence cascade modelsepsilon = 1                  # privacy budgetruns_alg = 5              # times to run dp-algorithm fixing parametersnumber_CPU = 4               # multiprocessing parametersdo_computation_exp_mech=Trueparameters_exp_mech={            'matrix_iter_val': list(range(iter_arc_live)),            'm_values' : [25, 50, 100],            'list_k' : [4],            'epsilon_values' : [0.1, 0.8],            'save_computation':True,            'output_file_name':'exp_mech.csv'            }def load_matrices_x():    # Function to load pickle file with already generate X matrices    file_name = 'matrices_x.pkl'    with open(file_name, 'rb') as f:        matrix_X = pickle.load(f)    return matrix_Xdef dump_expected_spread_exp_mech(list_matrices_x,matrix_iter_val, m_values,list_k,                                  epsilon_values,save_computation,output_file_name):    arguments=product(matrix_iter_val, m_values,list_k, epsilon_values)    arguments=[list(i) for i in arguments]    new_args=[]    copy_arguments=copy.deepcopy(arguments)    for i in range(len(arguments)):        temp=arguments[i]        temp[0]=list_matrices_x[int(temp[0])]        new_args.append(temp)    new_args=new_args*runs_alg    table_parameters=np.array(copy_arguments*runs_alg)    with multiprocessing.Pool(processes=number_CPU) as pool:        result=pool.starmap(expect_spread_exp_mechanism, new_args)    pool.close()    pool.join()    if save_computation:        pd.DataFrame(np.concatenate((table_parameters, np.array(result).reshape(table_parameters.shape[0],1)), axis=1),                             columns=['arc_live','m','k','epsilon','ixs']).to_csv(output_file_name,index=False)if __name__ == "__main__":    list_matrices_x = load_matrices_x()    if do_computation_exp_mech:        dump_expected_spread_exp_mech(list_matrices_x,**parameters_exp_mech)